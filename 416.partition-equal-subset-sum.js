/*
 * @lc app=leetcode id=416 lang=javascript
 *
 * [416] Partition Equal Subset Sum
 */

// @lc code=start
/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canPartition = function (nums) {
    let sum = nums.reduce((a, b) => a + b);
    if (sum % 2 == 1) return false;

    let target = sum / 2;
    let dp = Array(target + 1).fill(false);

    dp[0] = true;
    for (let i = 0; i < nums.length; i++) {
        for (let j = target; j >= nums[i]; j--) {
            dp[j] = dp[j - nums[i]] || dp[j];
        }
        if (dp[target] === true) return true;
    }
    return dp[target] === true;
};
// console.log(canPartition([1, 5, 11, 5]));
// console.log(canPartition([1, 2, 5]));
// console.log(canPartition([1,2,3,5]));
// console.log(canPartition([14, 9, 8, 4, 3, 2]));
// console.log(canPartition
// @lc code=end

